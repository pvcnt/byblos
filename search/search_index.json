{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Byblos","text":"<p>Byblos renders Prometheus queries as PNG graphs.</p> <p>While most dashboarding tools offer dynamic graphs (where one can easily point and click), Byblos generates PNG images. Compared to dynamic graphs, those PNG graphs can be easily embedded anywhere where images can be, such as in emails, websites or on-call systems. They can also easily be downloaded, shared (e.g., via Slack or email), and saved in order to work around data expiration.</p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":"<p>This page explains how to quickly start using Byblos.</p>"},{"location":"getting-started/#use-demo-instance","title":"Use demo instance","text":"<p>The simplest way to start playing around with Byblos is to use our demo instance, available at byblos.fly.dev. The latter is configured to use the demo Prometheus instance available at demo.promlabs.com.</p> <p>For example, let us consider the following prometheus expression, evaluated over the past week:</p> <pre><code>node_disk_read_bytes_total\n</code></pre> <p>It can be visualised in the Prometheus console:</p> <p></p> <p>A PNG graph for this query can be visualised using Byblos, using the following request:</p> <pre><code>https://byblos.fly.dev/api/v1/graph?q=node_disk_read_bytes_total&amp;s=now-1w\n</code></pre> <p>which will render something like:</p> <p></p>"},{"location":"getting-started/#run-with-docker","title":"Run with Docker","text":"<p>A Docker image is published to GitHub's registry at every commit. It can be started locally using the following command:</p> <pre><code>docker run -p 8080:8080 -ghcr.io/pvcnt/byblos/byblos\n</code></pre> <p>By default, it is configured to use the demo Prometheus instance available at https://demo.promlabs.com</p> <p>Similarly to above, the following request can be used to generate a sample PNG graph with Byblos:</p> <pre><code>https://localhost:8080/api/v1/graph?q=node_disk_read_bytes_total&amp;s=now-1w\n</code></pre> <p>Several configuration parameters may be overriden in order to customise the behaviour of Byblos. You may provide one or several config files as additional arguments, that will take precedence over the default configuration:</p> <pre><code>docker run -p 8080:8080 -v $PWD/custom.conf:/custom.conf ghcr.io/pvcnt/byblos/byblos /custom.conf\n</code></pre>"},{"location":"admin/configuration/","title":"Configuration","text":"<p>Configuration files are written in HOCON, which is a hierarchical configuration format. Additional configuration files may be passed as arguments to Byblos when starting it.</p> <p>This page details the most relevant configuration parameters that an administrator may find useful to override.</p>"},{"location":"admin/configuration/#prometheus-backend","title":"Prometheus backend","text":"Key Type Description Default <code>byblos.eval.db.class</code> string Database implementation to use <code>dev.byblos.eval.db.PrometheusDatabase</code> <code>byblos.eval.db.endpoint</code> string Prometheus instance to use <code>https://demo.promlabs.com</code>"},{"location":"admin/configuration/#graph-rendering","title":"Graph rendering","text":"Key Type Description Default <code>byblos.eval.step</code> duration Scrap interval for time series <code>1 minute</code> <code>byblos.eval.graph.max-datapoints</code> integer Maximum number of points to display on a single plot <code>1440</code> <code>byblos.eval.graph.png-metadata-enabled</code> boolean Whether to encode the graph uri will be encoded as a Source iTXt field in the generated image <code>false</code> <code>byblos.eval.graph.browser-agent-pattern</code> string Pattern to use to detect that a user-agent is a Web browser <code>mozilla|msie|gecko|chrome|opera|webkit</code>"},{"location":"admin/configuration/#graph-defaults","title":"Graph defaults","text":"<p>The default value of several query parameters of the Graph API can be overriden by configuration.</p> Key Query parameter <code>byblos.eval.graph.start-time</code> <code>s</code> <code>byblos.eval.graph.end-time</code> <code>e</code> <code>byblos.eval.graph.timezone</code> <code>tz</code> <code>byblos.eval.graph.width</code> <code>w</code> <code>byblos.eval.graph.height</code> <code>h</code> <code>byblos.eval.graph.theme</code> <code>theme</code> <code>byblos.eval.graph.light.palette</code> <code>palette</code> when <code>theme=light</code> <code>byblos.eval.graph.dark.palette</code> <code>palette</code> when <code>theme=dark</code>"},{"location":"admin/configuration/#security","title":"Security","text":"<p>Configuration parameters related to security are defined in the dedicated page. </p>"},{"location":"admin/security/","title":"Security","text":"<p>By default, Byblos is accessible without any form of authentication or authorization. While this is useful for quickly testing it, it will not be suitable for most production deployments.</p>"},{"location":"admin/security/#enabling-security","title":"Enabling security","text":"<p>Security is enabled by defining the following configuration parameters:</p> Key Type Description <code>byblos.webapi.security.enabled</code> boolean Whether to require authentication to access protected resources <code>byblos.webapi.security.provider</code> string Which OAuth provider to use <p>The available providers are described in the next sections. Each provider comes with its own additional settings.</p>"},{"location":"admin/security/#github","title":"GitHub","text":"<p>To use GitHub as an authentication provider, use the following configuration values:</p> <pre><code>byblos.webapi.security {\n  enabled = true\n  provider = github\n}\n</code></pre> <p>You will then need to define the following parameters to further configure GitHub:</p> Key Type Description <code>byblos.webapi.security.client-id</code> string Client ID for the OAuth flow <code>byblos.webapi.security.client-secret</code> string Client secret for the OAuth flow <code>byblos.webapi.security.github-org</code> string A GitHub organization that users must be a member of. Optional. <p>Please refer to GitHub's documentation to learn how to obtain your client ID and secret. The authorization callback URL will look like <code>https://byblos.fly.dev/login/oauth2/code/github</code>.</p> <p>By default, any GitHub user is allowed to access Byblos. Make sure to use the <code>github-org</code> parameter if you wish to restrict access to only members of a given org.</p>"},{"location":"admin/security/#google","title":"Google","text":"<p>To use Google as an authentication provider, use the following configuration values:</p> <pre><code>byblos.webapi.security {\n  enabled = true\n  provider = google\n}\n</code></pre> <p>You will then need to define the following parameters to further configure Google:</p> Key Type Description <code>byblos.webapi.security.client-id</code> string Client ID for the OAuth flow <code>byblos.webapi.security.client-secret</code> string Client secret for the OAuth flow <p>Please refer to Google's documentation to learn how to obtain your client ID and secret. The authorized redirect URI will look like <code>https://byblos.fly.dev/login/oauth2/code/google</code>.</p>"},{"location":"admin/security/#okta","title":"Okta","text":"<p>To use Google as an authentication provider, use the following configuration values:</p> <pre><code>byblos.webapi.security {\n  enabled = true\n  provider = okta\n}\n</code></pre> <p>You will then need to define the following parameters to further configure Okta:</p> Key Type Description <code>byblos.webapi.security.client-id</code> string Client ID for the OAuth flow <code>byblos.webapi.security.client-secret</code> string Client secret for the OAuth flow <code>byblos.webapi.security.okta-subdomain</code> string Okta subdomain <p>Please refer to Okta's documentation to learn how to obtain your client ID and secret. The redirect URI will look like <code>https://byblos.fly.dev/login/oauth2/code/okta</code>.</p>"},{"location":"user/graph-api/","title":"Graph API","text":"<p>The graph API is the resource that allows to execute and render Prometheus queries.</p>"},{"location":"user/graph-api/#path","title":"Path","text":"<pre><code>/api/v1/graph?q=&lt;expr&gt;[&amp;&lt;params&gt;]\n</code></pre>"},{"location":"user/graph-api/#http-method","title":"HTTP method","text":"<p>This endpoint is only accessible via the GET method.</p>"},{"location":"user/graph-api/#query-parameters","title":"Query parameters","text":""},{"location":"user/graph-api/#data","title":"Data","text":"<p>The below table details query parameters available to specify which data to display:</p> Name Type Description Default <code>q</code> string Query expression required <code>s</code> time Start time <code>e-3h</code> <code>e</code> time End time <code>now</code> <code>step</code> duration Interval between two data points auto <code>tz</code> timezone Timezone <code>US/Pacific</code> <p>In most cases, you should not use the <code>step</code> parameter. An appropriate step size will be automatically computed, depending on the specified time window and the image dimensions.</p> <p>The time zone is used both to interpret relative times (<code>s</code> and <code>e</code> parameters), and to localise times in the graph.</p>"},{"location":"user/graph-api/#output-format","title":"Output format","text":"<p>The below table details query parameters available to specify the output format:</p> Name Type Description Default <code>format</code> string Output format to use <code>png</code> <code>w</code> integer Width of the image or canvas, in pixels <code>700</code> <code>h</code> integer Height of the image or canvas, in pixels\u00a0 <code>300</code> <p>Note: Even when using a non-image output format, <code>w</code> and <code>h</code> parameters are used to automatically compute an appropriate <code>step</code>.</p>"},{"location":"user/graph-api/#image-flags","title":"Image flags","text":"<p>The below table details query parameters available to customise the image rendering:</p> Name Type Description Default <code>title</code> string A title for the graph none <code>ylabel</code> A title for the y-axis none <code>no_legend</code> boolean Do not display any legend <code>0</code> <code>no_legend_stats</code> boolean Do not display statistics in the legend <code>0</code> <code>axis_per_line</code> boolean Use a different Y-axis for every line <code>0</code> <code>only_graph</code> boolean Display an anonymised graph (no legend, no values) <code>0</code> <code>vision</code> string Simulate different types of color blindness <code>vision</code> <code>layout</code> string Control how components are layed out in the canvas <code>canvas</code> <code>stack</code> boolean Set the default line style to stack <code>0</code> <code>l</code> string or float Lower bound for the Y-axis <code>auto-style</code> <code>u</code> string or float Upper bound for the Y-axis <code>auto-style</code> <code>palette</code> string Color palette to use <code>armytage</code> <code>theme</code> string Theme to use <code>light</code> <code>scale</code> string Scale to use for the Y-axis <code>linear</code> <code>tick_labels</code> string Mode to use for display Y-axis ticks <code>decimal</code> <code>zoom</code> float Apply a zoom factor to the image <code>1.0</code> <p>Note: Those parameters do not apply if using a non-image output format (e.g., JSON).</p>"},{"location":"user/graph-api/#legend-flags","title":"Legend flags","text":"<p>The below table details query parameters available to customise the legend rendering:</p> Name Type Description Default <code>sort</code> string Sort mode to use for the legend <code>legend</code> <code>order</code> string Sort order to use for the legend <code>asc</code>"},{"location":"user/time-parameters/","title":"Time parameters","text":"<p>This page explains how time parameters (e.g., <code>s</code> and <code>e</code>) can be specified in the APIs.</p>"},{"location":"user/time-parameters/#timezone","title":"Timezone","text":"<p>Timezones can be specified using any valid time zone ID.</p>"},{"location":"user/time-parameters/#time","title":"Time","text":""},{"location":"user/time-parameters/#absolute-time","title":"Absolute time","text":"<p>Times can be specified in an absolute manner, using one of the following formats:</p> Format Description <code>%Y-%m-%d</code> Date, time will be midnight <code>%Y-%m-%dT%H:%M</code> Date and time, seconds will be 00 <code>%Y-%m-%dT%H:%M:%s</code> Date and time <code>%s</code> Seconds (or milliseconds) since January 1, 1970 UTC <p>For every format based on a date, a zone offset can be explicitely specified at the end of the string, for example:</p> <pre><code>2023-06-05T11:25+00\n2023-06-05T11:25+0000\n2023-06-05T11:25-07\n2023-06-05T11:25-0700\n2023-06-05T11:25+02:30\n2023-06-05T11:25+0230\n</code></pre> <p><code>Z</code> can also be used to specify a UTC timezone, for example:</p> <pre><code>2023-06-05T11:25Z\n</code></pre> <p>If no timezone is specified, dates are parsed using the first timezone specified in the request as a reference.</p>"},{"location":"user/time-parameters/#named-time","title":"Named time","text":"<p>Times can be specified using a reference to a well-known point in time:</p> Name Description <code>now</code> Current time <code>epoch</code> January 1, 1970 UTC <code>s</code> Start time <code>e</code> End time"},{"location":"user/time-parameters/#relative-time","title":"Relative time","text":"<p>Times can be specified as an offset duration from a named time, for example:</p> <pre><code>now-1w\ne-6h\ns+2d\ns+P2DT6H\n</code></pre> <p>Durations themselves can be specified in two fashions, detailed in the following section.</p>"},{"location":"user/time-parameters/#duration","title":"Duration","text":""},{"location":"user/time-parameters/#simple-duration","title":"Simple duration","text":"<p>Durations can be specified using a positive integer following by a unit.</p> Unit Description <code>s</code>, <code>second</code>, <code>seconds</code> Number of seconds <code>m</code>, <code>min</code>, <code>minute</code>, <code>minutes</code> Number of minutes <code>h</code>, <code>hour</code>, <code>hours</code> Number of hours <code>d</code>, <code>day</code>, <code>days</code> Number of days (25 hoyrs) <code>w</code>, <code>week</code>, <code>weeks</code> Number of weeks (7 days) <code>month</code>, <code>months</code> Number of months (30 days) <code>y</code>, <code>year</code>, <code>years</code> Number of years (365 days)"},{"location":"user/time-parameters/#iso-duration","title":"ISO duration","text":"<p>Durations can be specified using an ISO-formatted string. ISO durations are limited to days (<code>D</code>) as the largest part that can be used. Weeks (<code>W</code>), months (<code>M</code>) and years (<code>Y</code>) are not supported.</p>"},{"location":"user/stack-language/","title":"Stack language","text":"<p>Stack language is a way of specifying Prometheus queries to plot on a graph. It is adapted from Atlas Stack Language, which is itself based on RPN expressions supported by RRDtool. Here is an example of a stack language expression:</p> <pre><code>node_disk_read_bytes_total{node=app1},#0000FF,:color,42\n</code></pre> <p>This pushes on the stack a PromQL query, applies some styling on it (draw the line in blue), and pushes a constant value.</p>"},{"location":"user/stack-language/#goals-and-non-goals","title":"Goals and non-goals","text":"<p>Stack language is intended to be compact and URL-friendly. It is well adapted to the graph API which is designed around GET calls.</p> <p>Stack language is an extension of PromQL, i.e., any valid PromQL expression is also a valid stack language expression. Moreover, is it by design organised around a syntax that does not look like PromQL, i.e., it does not try to add new primitives to PromQL but rather allows to combine or enrich PromQL expressions with another language.</p> <p>Stack language sticks to adding presentation features to PromQL. It does not try to add new capabilies around time series manipulation. Said otherwise, data processing is done by Prometheus servers and not by Byblos.</p>"},{"location":"user/stack-language/#stack-structure","title":"Stack structure","text":"<p>Elements to push on the stack are separated by a comma. For example <code>a</code> defines a stack with a single element <code>\"a\"</code>, while <code>a,b</code> defines a stack with two elements <code>\"a\"</code> and <code>\"b\"</code>.</p> <p>Commas nested inside brackets (<code>[]</code>), curly brackets (<code>{}</code>) or parens (<code>()</code>) are ignored. For example, <code>metric{app=app1,status=200}</code> defines a stack with a single element, ignoring the comma inside the selector.</p> <p>Elements starting with a colon (<code>:</code>) are words, which define commands that manipulate the stack by evaluating, replacing, adding or removing elements. For example, <code>a,:dup</code> defines a stack that is equivalent to <code>a,a</code> once evaluated.</p> <p>Parenthesis are used to define lists. Lists always contain litteral, i.e., commands are not executed. For example, <code>(,a,:dup,)</code> defines a stack with a single element, which is the list <code>[\"a\", \":dup\"]</code>.</p> <p>Any double value that is left on the stack will get implicitly converted to a constant line. Any string value that is left on the stack will get implicitly converted to a query.</p>"},{"location":"user/stack-language/#variables","title":"Variables","text":"<p>Variables can be used to store and retrieve any item in the stack. The following table contains a list of well-known variables:</p> Name Description <code>tz</code> Timezone to use"},{"location":"user/stack-language/#vocabulary","title":"Vocabulary","text":"<p>Words available in the stack language are presented in the other pages of this category. Please use the left navigation bar to get the definition of a word.</p>"},{"location":"user/stack-language/-rot/","title":"-rot","text":"Input stack Output stack <code>a,b,...,:-rot</code> <code>b,...,a</code> <p>Rotate the stack so that the item at the top is now at the bottom.</p>"},{"location":"user/stack-language/2over/","title":"2over","text":"Input stack Output stack <code>a,b,:2over</code> <code>a,b,a,b</code> <p>Shorthand equivalent to writing: <code>:over,:over</code>.</p>"},{"location":"user/stack-language/alpha/","title":"alpha","text":"Input stack Output stack <code>TimeSeriesExpr,String,:alpha</code> <code>StyleExpr</code> <p>Set the alpha value for the colors on the line. The value should be a two digit hex number where 00 is transparent and ff is opague. This setting will be ignored if the color setting is used for the same line.</p>"},{"location":"user/stack-language/axis/","title":"axis","text":"Input stack Output stack <code>TimeSeriesExpr,Integer,:axis</code> <code>StyleExpr</code> <p>Specify which Y-axis to use for the line. The value specified is the axis number and should be an integer in the range 0 to 4 inclusive.</p>"},{"location":"user/stack-language/clear/","title":"clear","text":"Input stack Output stack <code>...,:clear</code> <p>Remove all items from the stack.</p>"},{"location":"user/stack-language/color/","title":"color","text":"Input stack Output stack <code>TimeSeriesExpr,String,:color</code> <code>StyleExpr</code> <p>Set the color for the line. The value should be one of:</p> <ul> <li>Hex triplet, e.g. f00 is red.</li> <li>6 digit hex RBG, e.g. ff0000 is red.</li> <li>8 digit hex ARGB, e.g. ffff0000 is red. The first byte is the alpha setting to use with the color.</li> </ul>"},{"location":"user/stack-language/const/","title":"const","text":"Input stack Output stack <code>Float,:const</code> <code>TimeSeriesExpr</code> <p>Generate a line where each datapoint is a constant value.</p>"},{"location":"user/stack-language/depth/","title":"depth","text":"Input stack Output stack <code>aN-1,...,a0,:depth</code> <code>aN-1,...,a0,N</code> <p>Push the depth of the stack.</p>"},{"location":"user/stack-language/drop/","title":"drop","text":"Input stack Output stack <code>a,:clear</code> <p>Remove the item on the top of the stack.</p>"},{"location":"user/stack-language/dup/","title":"dup","text":"Input stack Output stack <code>Any,:clear</code> <code>Any,Any</code> <p>Duplicate the item on the top of the stack.</p>"},{"location":"user/stack-language/get/","title":"get","text":"Input stack Output stack <code>String,:get</code> <code>Any</code> <p>Get the value of a variable and push it on the stack.</p>"},{"location":"user/stack-language/legend/","title":"legend","text":"Input stack Output stack <code>TimeSeriesExpr,String,:legend</code> <code>StyleExpr</code> <p>Set the legend text. Legends can contain variables based on the labels returned by Prometheus. Variables start with a <code>$</code> sign and can optionally be enclosed between parentheses. The parentheses are required for cases where the characters immediately following the name could be a part of the name. If a variable is not defined, then the name of the variable will be used as the substitution value.</p>"},{"location":"user/stack-language/limit/","title":"limit","text":"Input stack Output stack <code>TimeSeriesExpr,Integer,:limit</code> <code>StyleExpr</code> <p>Restrict the output to the first specified number of lines from the input expression. The lines will be chosen in order based on the sort and order used.</p>"},{"location":"user/stack-language/ls/","title":"ls","text":"Input stack Output stack <code>TimeSeriesExpr,String,:ls</code> <code>StyleExpr</code> <p>Set the line style. The value should be one of:</p> <ul> <li><code>line</code>: draw a normal line. This is the default.</li> <li><code>area</code>: fill in the space between the line value and 0 on the Y-axis.</li> <li><code>stack</code>: stack the filled area on to the previous stacked lines on the same axis.</li> <li><code>vspan</code>: non-zero datapoints will be drawn as a vertical span.</li> </ul>"},{"location":"user/stack-language/lw/","title":"lw","text":"Input stack Output stack <code>TimeSeriesExpr,Integer,:lw</code> <code>StyleExpr</code> <p>The width of the stroke used when drawing the line.</p>"},{"location":"user/stack-language/ndrop/","title":"ndrop","text":"Input stack Output stack <code>aN,...,a0,N,:ndrop</code> <code>aN</code> <p>Remove the top N items on the stack.</p>"},{"location":"user/stack-language/order/","title":"order","text":"Input stack Output stack <code>TimeSeriesExpr,String,:order</code> <code>StyleExpr</code> <p>Order to use for sorting results. Supported values are <code>asc</code> and <code>desc</code> for ascending and descending order respectively. Default is <code>asc</code>.</p>"},{"location":"user/stack-language/over/","title":"over","text":"Input stack Output stack <code>a,b,:over</code> <code>a,b,a</code> <p>Copy the item in the second position on the stack to the top.</p>"},{"location":"user/stack-language/palette/","title":"palette","text":"Input stack Output stack <code>TimeSeriesExpr,String,:palette</code> <code>StyleExpr</code> <p>Set the palette to use for the results of an expression. This operator is allows for scoping a palette to a particular query instead of to all lines that share the same axis.</p>"},{"location":"user/stack-language/pick/","title":"pick","text":"Input stack Output stack <code>aN,...,a0,n,:pick</code> <code>a0,...,aN,an</code> <p>Rotate the stack so that the item at the top is now at the bottom.</p>"},{"location":"user/stack-language/query/","title":"query","text":"Input stack Output stack <code>String,:query</code> <code>TimeSeriesExpr</code> <p>Generate a time series that is the result of PromQL expression.</p>"},{"location":"user/stack-language/rot/","title":"rot","text":"Input stack Output stack <code>a,...,b,:rot</code> <code>b,a,...</code> <p>Rotate the stack so that the item at the bottom is now at the top.</p>"},{"location":"user/stack-language/set/","title":"set","text":"Input stack Output stack <code>String,Any,:set</code> <p>Set the value of a variable.</p>"},{"location":"user/stack-language/sort/","title":"sort","text":"Input stack Output stack <code>TimeSeriesExpr,String,:sort</code> <code>StyleExpr</code> <p>Sort the results of an expression in the legend by one of the summary statistics or by the legend text. The default behavior is to sort by the legend text. Valid statistic values are <code>avg</code>, <code>count</code>, <code>max</code>, <code>min</code>, <code>last</code>, and <code>total</code>. This will sort in ascending order by default, for descending order use order.</p>"},{"location":"user/stack-language/swap/","title":"swap","text":"Input stack Output stack <code>a,b,:swap</code> <code>b,a</code> <p>Swap the top two items on the stack.</p>"}]}